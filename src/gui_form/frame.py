# -*- coding: utf-8 -*- ############################################################################# Python code generated with wxFormBuilder (version Sep 12 2010)## http://www.wxformbuilder.org/#### PLEASE DO "NOT" EDIT THIS FILE!###########################################################################import wximport wx.grid############################################################################# Class Frame###########################################################################class Frame ( wx.Frame ):		def __init__( self, parent ):		wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = u"Visual Sensor Fusion Analyzer", pos = wx.DefaultPosition, size = wx.Size( 1300,1120 ), style = wx.DEFAULT_FRAME_STYLE|wx.HSCROLL|wx.TAB_TRAVERSAL|wx.VSCROLL )				self.SetSizeHintsSz( wx.DefaultSize, wx.DefaultSize )				bSizer1 = wx.BoxSizer( wx.VERTICAL )				fgSizer17 = wx.FlexGridSizer( 2, 1, 0, 0 )		fgSizer17.AddGrowableCol( 0 )		fgSizer17.AddGrowableRow( 0 )		fgSizer17.AddGrowableRow( 1 )		fgSizer17.SetFlexibleDirection( wx.BOTH )		fgSizer17.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.m_panel_video_display = wx.Panel( self, wx.ID_ANY, wx.DefaultPosition, wx.Size( 1280,720 ), wx.RAISED_BORDER|wx.TAB_TRAVERSAL )		self.m_panel_video_display.SetMaxSize( wx.Size( 1280,720 ) )				fgSizer17.Add( self.m_panel_video_display, 1, wx.EXPAND, 5 )				self.m_scrolledWindow1 = wx.ScrolledWindow( self, wx.ID_ANY, wx.DefaultPosition, wx.Size( -1,-1 ), wx.HSCROLL|wx.VSCROLL )		self.m_scrolledWindow1.SetScrollRate( 5, 5 )		self.m_scrolledWindow1.SetMinSize( wx.Size( -1,500 ) )				fgSizer1 = wx.FlexGridSizer( 1, 4, 0, 0 )		fgSizer1.SetFlexibleDirection( wx.BOTH )		fgSizer1.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.m_panel3 = wx.Panel( self.m_scrolledWindow1, wx.ID_ANY, wx.DefaultPosition, wx.Size( -1,-1 ), wx.SUNKEN_BORDER|wx.TAB_TRAVERSAL )		self.m_panel3.SetMaxSize( wx.Size( 255,-1 ) )				gSizer2 = wx.GridSizer( 9, 2, 0, 0 )				self.m_staticText1 = wx.StaticText( self.m_panel3, wx.ID_ANY, u"Run Settings", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText1.Wrap( -1 )		gSizer2.Add( self.m_staticText1, 0, wx.ALL, 5 )				self.m_button_get_data = wx.Button( self.m_panel3, wx.ID_ANY, u"Get Data", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer2.Add( self.m_button_get_data, 0, wx.ALL, 5 )				self.m_staticText3 = wx.StaticText( self.m_panel3, wx.ID_ANY, u"Date: ", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText3.Wrap( -1 )		gSizer2.Add( self.m_staticText3, 0, wx.ALL, 5 )				m_choice_run_dateChoices = []		self.m_choice_run_date = wx.Choice( self.m_panel3, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, m_choice_run_dateChoices, 0 )		self.m_choice_run_date.SetSelection( 0 )		self.m_choice_run_date.SetMaxSize( wx.Size( 120,-1 ) )				gSizer2.Add( self.m_choice_run_date, 0, wx.ALL, 5 )				self.m_staticText4 = wx.StaticText( self.m_panel3, wx.ID_ANY, u"Run #: ", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText4.Wrap( -1 )		gSizer2.Add( self.m_staticText4, 0, wx.ALL, 5 )				m_choice_run_numberChoices = []		self.m_choice_run_number = wx.Choice( self.m_panel3, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, m_choice_run_numberChoices, 0 )		self.m_choice_run_number.SetSelection( 0 )		self.m_choice_run_number.SetFont( wx.Font( wx.NORMAL_FONT.GetPointSize(), 70, 90, 90, False, wx.EmptyString ) )		self.m_choice_run_number.SetMaxSize( wx.Size( 120,-1 ) )				gSizer2.Add( self.m_choice_run_number, 0, wx.ALL, 5 )				self.m_staticText5 = wx.StaticText( self.m_panel3, wx.ID_ANY, u"Start/Stop Frame: ", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText5.Wrap( -1 )		gSizer2.Add( self.m_staticText5, 0, wx.ALL, 5 )				self.m_staticText_start_stop = wx.StaticText( self.m_panel3, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText_start_stop.Wrap( -1 )		gSizer2.Add( self.m_staticText_start_stop, 0, wx.ALL, 5 )				self.m_staticText501 = wx.StaticText( self.m_panel3, wx.ID_ANY, u"# Lidar Segs", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText501.Wrap( -1 )		gSizer2.Add( self.m_staticText501, 0, wx.ALL, 5 )				m_choice_num_lidar_segsChoices = [ u"16", u"8", u"4", u"2", u"1" ]		self.m_choice_num_lidar_segs = wx.Choice( self.m_panel3, wx.ID_ANY, wx.DefaultPosition, wx.Size( -1,-1 ), m_choice_num_lidar_segsChoices, 0 )		self.m_choice_num_lidar_segs.SetSelection( 0 )		self.m_choice_num_lidar_segs.SetMaxSize( wx.Size( 120,-1 ) )				gSizer2.Add( self.m_choice_num_lidar_segs, 0, wx.ALL, 5 )				self.m_staticText7 = wx.StaticText( self.m_panel3, wx.ID_ANY, u"Use Detector: ", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText7.Wrap( -1 )		gSizer2.Add( self.m_staticText7, 0, wx.ALL, 5 )				m_choice_run_use_detectorChoices = [ u"True", u"False" ]		self.m_choice_run_use_detector = wx.Choice( self.m_panel3, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, m_choice_run_use_detectorChoices, 0 )		self.m_choice_run_use_detector.SetSelection( 0 )		gSizer2.Add( self.m_choice_run_use_detector, 0, wx.ALL, 5 )				self.m_checkBox_use_filtered_data = wx.CheckBox( self.m_panel3, wx.ID_ANY, u"Filter Data", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer2.Add( self.m_checkBox_use_filtered_data, 0, wx.ALL, 5 )				self.m_checkBox_show_coord = wx.CheckBox( self.m_panel3, wx.ID_ANY, u"Show Coord", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer2.Add( self.m_checkBox_show_coord, 0, wx.ALL, 5 )				self.m_textCtrl_classes = wx.TextCtrl( self.m_panel3, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_textCtrl_classes.SetToolTipString( u"Detection Classes: " )		self.m_textCtrl_classes.SetMinSize( wx.Size( 220,-1 ) )				gSizer2.Add( self.m_textCtrl_classes, 0, wx.ALL, 5 )				self.m_staticText491 = wx.StaticText( self.m_panel3, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText491.Wrap( -1 )		gSizer2.Add( self.m_staticText491, 0, wx.ALL, 5 )				self.m_staticText51 = wx.StaticText( self.m_panel3, wx.ID_ANY, u"Min Det Conf", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText51.Wrap( -1 )		gSizer2.Add( self.m_staticText51, 0, wx.ALL, 5 )				gSizer6 = wx.GridSizer( 1, 2, 0, 0 )				self.m_textCtrl_min_det_confidence = wx.TextCtrl( self.m_panel3, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( -1,-1 ), 0 )		self.m_textCtrl_min_det_confidence.SetMinSize( wx.Size( 70,-1 ) )				gSizer6.Add( self.m_textCtrl_min_det_confidence, 0, wx.ALL, 5 )				self.m_checkBox_enable_min_det_confidence = wx.CheckBox( self.m_panel3, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 20,-1 ), 0 )		gSizer6.Add( self.m_checkBox_enable_min_det_confidence, 0, wx.ALIGN_CENTER|wx.ALL, 5 )				gSizer2.Add( gSizer6, 1, wx.EXPAND, 5 )				self.m_panel3.SetSizer( gSizer2 )		self.m_panel3.Layout()		gSizer2.Fit( self.m_panel3 )		fgSizer1.Add( self.m_panel3, 0, wx.ALL, 5 )				fgSizer20 = wx.FlexGridSizer( 2, 1, 0, 0 )		fgSizer20.SetFlexibleDirection( wx.BOTH )		fgSizer20.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.m_panel4 = wx.Panel( self.m_scrolledWindow1, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.SUNKEN_BORDER|wx.TAB_TRAVERSAL )		fgSizer3 = wx.FlexGridSizer( 9, 2, 0, 0 )		fgSizer3.SetFlexibleDirection( wx.BOTH )		fgSizer3.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.m_checkBox_show_index_numbers = wx.CheckBox( self.m_panel4, wx.ID_ANY, u"Show Index Numbers", wx.DefaultPosition, wx.DefaultSize, 0 )		fgSizer3.Add( self.m_checkBox_show_index_numbers, 0, wx.ALL, 5 )				self.m_staticText42 = wx.StaticText( self.m_panel4, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText42.Wrap( -1 )		fgSizer3.Add( self.m_staticText42, 0, wx.ALL, 5 )				self.m_checkBox_show_kitti_points = wx.CheckBox( self.m_panel4, wx.ID_ANY, u"Show Kitti Points", wx.DefaultPosition, wx.DefaultSize, 0 )		fgSizer3.Add( self.m_checkBox_show_kitti_points, 0, wx.ALL, 5 )				self.m_checkBox_show_all_kitti_points = wx.CheckBox( self.m_panel4, wx.ID_ANY, u"All", wx.DefaultPosition, wx.DefaultSize, 0 )		fgSizer3.Add( self.m_checkBox_show_all_kitti_points, 0, wx.ALL, 5 )				self.m_checkBox_show_ground_truth = wx.CheckBox( self.m_panel4, wx.ID_ANY, u"Show Ground Truth", wx.DefaultPosition, wx.DefaultSize, 0 )		fgSizer3.Add( self.m_checkBox_show_ground_truth, 0, wx.ALL, 5 )				self.m_colourPicker_ground_truth = wx.ColourPickerCtrl( self.m_panel4, wx.ID_ANY, wx.Colour( 0, 255, 0 ), wx.DefaultPosition, wx.Size( 30,-1 ), wx.CLRP_DEFAULT_STYLE )		fgSizer3.Add( self.m_colourPicker_ground_truth, 0, wx.ALIGN_CENTER_HORIZONTAL, 5 )				self.m_checkBox_show_video_detections = wx.CheckBox( self.m_panel4, wx.ID_ANY, u"Show Video Detections", wx.DefaultPosition, wx.DefaultSize, 0 )		fgSizer3.Add( self.m_checkBox_show_video_detections, 0, wx.ALL, 5 )				self.m_colourPicker_video_detections = wx.ColourPickerCtrl( self.m_panel4, wx.ID_ANY, wx.Colour( 0, 0, 255 ), wx.DefaultPosition, wx.Size( 30,-1 ), wx.CLRP_DEFAULT_STYLE )		fgSizer3.Add( self.m_colourPicker_video_detections, 0, wx.ALIGN_CENTER_HORIZONTAL, 5 )				self.m_checkBox_show_lidar_detections = wx.CheckBox( self.m_panel4, wx.ID_ANY, u"Show Lidar Ideal BBs", wx.DefaultPosition, wx.DefaultSize, 0 )		fgSizer3.Add( self.m_checkBox_show_lidar_detections, 0, wx.ALL, 5 )				self.m_colourPicker_lidar_detections = wx.ColourPickerCtrl( self.m_panel4, wx.ID_ANY, wx.Colour( 255, 0, 0 ), wx.DefaultPosition, wx.Size( 30,-1 ), wx.CLRP_DEFAULT_STYLE )		fgSizer3.Add( self.m_colourPicker_lidar_detections, 0, wx.ALIGN_CENTER_HORIZONTAL, 5 )				self.m_checkBox_show_associations = wx.CheckBox( self.m_panel4, wx.ID_ANY, u"Show Associations", wx.DefaultPosition, wx.DefaultSize, 0 )		fgSizer3.Add( self.m_checkBox_show_associations, 0, wx.ALL, 5 )				self.m_colourPicker_associations = wx.ColourPickerCtrl( self.m_panel4, wx.ID_ANY, wx.Colour( 255, 255, 0 ), wx.DefaultPosition, wx.Size( 30,-1 ), wx.CLRP_DEFAULT_STYLE )		fgSizer3.Add( self.m_colourPicker_associations, 0, wx.ALIGN_CENTER_HORIZONTAL, 5 )				self.m_checkBox_show_detection_zones = wx.CheckBox( self.m_panel4, wx.ID_ANY, u"Show Detection Zones", wx.DefaultPosition, wx.DefaultSize, 0 )		fgSizer3.Add( self.m_checkBox_show_detection_zones, 0, wx.ALL, 5 )				self.m_colourPicker_detection_zones = wx.ColourPickerCtrl( self.m_panel4, wx.ID_ANY, wx.Colour( 0, 0, 0 ), wx.DefaultPosition, wx.Size( 30,-1 ), wx.CLRP_DEFAULT_STYLE )		fgSizer3.Add( self.m_colourPicker_detection_zones, 0, wx.ALIGN_CENTER_HORIZONTAL, 5 )				self.m_checkBox_show_3d_ground_truth = wx.CheckBox( self.m_panel4, wx.ID_ANY, u"Show 3D Ground Truth", wx.DefaultPosition, wx.DefaultSize, 0 )		fgSizer3.Add( self.m_checkBox_show_3d_ground_truth, 0, wx.ALL, 5 )				self.m_colourPicker_3d_ground_truth_color = wx.ColourPickerCtrl( self.m_panel4, wx.ID_ANY, wx.Colour( 255, 127, 0 ), wx.DefaultPosition, wx.Size( 30,-1 ), wx.CLRP_DEFAULT_STYLE )		fgSizer3.Add( self.m_colourPicker_3d_ground_truth_color, 0, wx.ALIGN_CENTER_HORIZONTAL, 5 )				self.m_checkBox_show_lidar_values = wx.CheckBox( self.m_panel4, wx.ID_ANY, u"Show Lidar Values", wx.DefaultPosition, wx.DefaultSize, 0 )		fgSizer3.Add( self.m_checkBox_show_lidar_values, 0, wx.ALL, 5 )				self.m_colourPicker_lidar_values_color = wx.ColourPickerCtrl( self.m_panel4, wx.ID_ANY, wx.Colour( 255, 0, 0 ), wx.DefaultPosition, wx.Size( 30,-1 ), wx.CLRP_DEFAULT_STYLE )		fgSizer3.Add( self.m_colourPicker_lidar_values_color, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALL, 5 )				self.m_panel4.SetSizer( fgSizer3 )		self.m_panel4.Layout()		fgSizer3.Fit( self.m_panel4 )		fgSizer20.Add( self.m_panel4, 1, wx.ALL, 5 )				self.m_panel27 = wx.Panel( self.m_scrolledWindow1, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		self.m_panel27.SetMaxSize( wx.Size( 220,-1 ) )				gSizer7 = wx.GridSizer( 2, 2, 0, 0 )				self.m_checkBox_enable_logging = wx.CheckBox( self.m_panel27, wx.ID_ANY, u"Logging", wx.DefaultPosition, wx.Size( -1,-1 ), 0 )		gSizer7.Add( self.m_checkBox_enable_logging, 0, wx.ALL, 5 )				self.m_checkBox_enable_save_png = wx.CheckBox( self.m_panel27, wx.ID_ANY, u"Save PNG", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer7.Add( self.m_checkBox_enable_save_png, 0, wx.ALL, 5 )				self.m_textCtrl_logging_filepath = wx.TextCtrl( self.m_panel27, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( -1,-1 ), 0 )		self.m_textCtrl_logging_filepath.SetMinSize( wx.Size( 200,-1 ) )				gSizer7.Add( self.m_textCtrl_logging_filepath, 0, wx.ALL, 5 )				self.m_staticText53 = wx.StaticText( self.m_panel27, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText53.Wrap( -1 )		gSizer7.Add( self.m_staticText53, 0, wx.ALL, 5 )				self.m_panel27.SetSizer( gSizer7 )		self.m_panel27.Layout()		gSizer7.Fit( self.m_panel27 )		fgSizer20.Add( self.m_panel27, 1, wx.EXPAND |wx.ALL, 5 )				fgSizer1.Add( fgSizer20, 1, wx.EXPAND, 5 )				self.m_panel5 = wx.Panel( self.m_scrolledWindow1, wx.ID_ANY, wx.DefaultPosition, wx.Size( -1,-1 ), wx.SUNKEN_BORDER|wx.TAB_TRAVERSAL )		self.m_panel5.SetMaxSize( wx.Size( 360,-1 ) )				gSizer4 = wx.GridSizer( 9, 2, 0, 0 )				self.m_staticText_current_frame = wx.StaticText( self.m_panel5, wx.ID_ANY, u"Current Frame: 0", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText_current_frame.Wrap( -1 )		gSizer4.Add( self.m_staticText_current_frame, 0, wx.ALL, 5 )				gSizer41 = wx.GridSizer( 1, 5, 0, 0 )				self.m_bitmap_back10 = wx.StaticBitmap( self.m_panel5, wx.ID_ANY, wx.Bitmap( u"./images/step_backward10_1.png", wx.BITMAP_TYPE_ANY ), wx.DefaultPosition, wx.Size( 30,20 ), 0 )		gSizer41.Add( self.m_bitmap_back10, 0, wx.ALIGN_CENTER|wx.ALL, 5 )				self.m_bitmap_back1 = wx.StaticBitmap( self.m_panel5, wx.ID_ANY, wx.Bitmap( u"./images/step_backward_1.png", wx.BITMAP_TYPE_ANY ), wx.DefaultPosition, wx.Size( 30,20 ), 0 )		gSizer41.Add( self.m_bitmap_back1, 0, wx.ALIGN_CENTER|wx.ALL, 5 )				self.m_bitmap_play = wx.StaticBitmap( self.m_panel5, wx.ID_ANY, wx.Bitmap( u"./images/play_1.png", wx.BITMAP_TYPE_ANY ), wx.DefaultPosition, wx.Size( 30,20 ), 0 )		gSizer41.Add( self.m_bitmap_play, 0, wx.ALIGN_CENTER|wx.ALL, 5 )				self.m_bitmap_step_forward = wx.StaticBitmap( self.m_panel5, wx.ID_ANY, wx.Bitmap( u"./images/step_forward_1.png", wx.BITMAP_TYPE_ANY ), wx.DefaultPosition, wx.Size( 30,20 ), 0 )		gSizer41.Add( self.m_bitmap_step_forward, 0, wx.ALIGN_CENTER|wx.ALL, 5 )				self.m_bitmap_forward10 = wx.StaticBitmap( self.m_panel5, wx.ID_ANY, wx.Bitmap( u"./images/step_forward10_1.png", wx.BITMAP_TYPE_ANY ), wx.DefaultPosition, wx.Size( 30,20 ), 0 )		gSizer41.Add( self.m_bitmap_forward10, 0, wx.ALIGN_CENTER|wx.ALL, 5 )				gSizer4.Add( gSizer41, 1, wx.EXPAND, 5 )				self.m_button_update = wx.Button( self.m_panel5, wx.ID_ANY, u"Update Image", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer4.Add( self.m_button_update, 0, wx.ALL, 5 )				m_choice_play_speedChoices = [ u"Fast", u"Medium", u"Slow" ]		self.m_choice_play_speed = wx.Choice( self.m_panel5, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, m_choice_play_speedChoices, 0 )		self.m_choice_play_speed.SetSelection( 0 )		self.m_choice_play_speed.SetMaxSize( wx.Size( 80,-1 ) )				gSizer4.Add( self.m_choice_play_speed, 0, wx.ALL, 5 )				self.m_button_goto_frame_number = wx.Button( self.m_panel5, wx.ID_ANY, u"Go To Frame #", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer4.Add( self.m_button_goto_frame_number, 0, wx.ALL, 5 )				fgSizer19 = wx.FlexGridSizer( 1, 3, 0, 0 )		fgSizer19.SetFlexibleDirection( wx.BOTH )		fgSizer19.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.m_textCtrl_goto_frame_number = wx.TextCtrl( self.m_panel5, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_textCtrl_goto_frame_number.SetMaxSize( wx.Size( 80,-1 ) )				fgSizer19.Add( self.m_textCtrl_goto_frame_number, 0, wx.ALL, 5 )				self.m_staticText52 = wx.StaticText( self.m_panel5, wx.ID_ANY, u"Lag", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText52.Wrap( -1 )		fgSizer19.Add( self.m_staticText52, 0, wx.ALIGN_CENTER_VERTICAL, 5 )				m_choice_lag_framesChoices = [ u"0", u"1", u"2", u"3", u"4" ]		self.m_choice_lag_frames = wx.Choice( self.m_panel5, wx.ID_ANY, wx.DefaultPosition, wx.Size( 40,-1 ), m_choice_lag_framesChoices, 0 )		self.m_choice_lag_frames.SetSelection( 0 )		fgSizer19.Add( self.m_choice_lag_frames, 0, wx.ALIGN_CENTER|wx.ALL, 5 )				gSizer4.Add( fgSizer19, 1, wx.EXPAND, 5 )				self.m_staticText49 = wx.StaticText( self.m_panel5, wx.ID_ANY, u"Max Cost", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText49.Wrap( -1 )		gSizer4.Add( self.m_staticText49, 0, wx.ALL, 5 )				gSizer51 = wx.GridSizer( 1, 2, 0, 0 )				self.m_textCtrl_max_cost = wx.TextCtrl( self.m_panel5, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_textCtrl_max_cost.SetMaxSize( wx.Size( 80,-1 ) )				gSizer51.Add( self.m_textCtrl_max_cost, 0, wx.ALL, 5 )				self.m_checkBox_enable_max_cost = wx.CheckBox( self.m_panel5, wx.ID_ANY, u"Enable", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer51.Add( self.m_checkBox_enable_max_cost, 0, wx.ALL, 5 )				gSizer4.Add( gSizer51, 1, wx.EXPAND, 5 )				self.m_staticText45 = wx.StaticText( self.m_panel5, wx.ID_ANY, u"L2 Norm Weight", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText45.Wrap( -1 )		gSizer4.Add( self.m_staticText45, 0, wx.ALL, 5 )				self.m_textCtrl_l2_norm_weight = wx.TextCtrl( self.m_panel5, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_textCtrl_l2_norm_weight.SetMaxSize( wx.Size( 80,-1 ) )				gSizer4.Add( self.m_textCtrl_l2_norm_weight, 0, wx.ALL, 5 )				self.m_staticText46 = wx.StaticText( self.m_panel5, wx.ID_ANY, u"y2 Est Weight", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText46.Wrap( -1 )		gSizer4.Add( self.m_staticText46, 0, wx.ALL, 5 )				self.m_textCtrl_y2_est_weight = wx.TextCtrl( self.m_panel5, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_textCtrl_y2_est_weight.SetMaxSize( wx.Size( 80,-1 ) )				gSizer4.Add( self.m_textCtrl_y2_est_weight, 0, wx.ALL, 5 )				self.m_staticText47 = wx.StaticText( self.m_panel5, wx.ID_ANY, u"IOU Weight", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText47.Wrap( -1 )		gSizer4.Add( self.m_staticText47, 0, wx.ALL, 5 )				self.m_textCtrl_iou_weight = wx.TextCtrl( self.m_panel5, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_textCtrl_iou_weight.SetMaxSize( wx.Size( 80,-1 ) )				gSizer4.Add( self.m_textCtrl_iou_weight, 0, wx.ALL, 5 )				self.m_staticText48 = wx.StaticText( self.m_panel5, wx.ID_ANY, u"Seg Intersect Weight", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText48.Wrap( -1 )		gSizer4.Add( self.m_staticText48, 0, wx.ALL, 5 )				self.m_textCtrl_seg_intersect_weight = wx.TextCtrl( self.m_panel5, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_textCtrl_seg_intersect_weight.SetMaxSize( wx.Size( 80,-1 ) )				gSizer4.Add( self.m_textCtrl_seg_intersect_weight, 0, wx.ALL, 5 )				self.m_checkBox_use_intersecting_only = wx.CheckBox( self.m_panel5, wx.ID_ANY, u"use intersecting", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer4.Add( self.m_checkBox_use_intersecting_only, 0, wx.ALL, 5 )				self.m_staticText50 = wx.StaticText( self.m_panel5, wx.ID_ANY, u"lidar values only", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText50.Wrap( -1 )		gSizer4.Add( self.m_staticText50, 0, wx.ALL, 5 )				self.m_panel5.SetSizer( gSizer4 )		self.m_panel5.Layout()		gSizer4.Fit( self.m_panel5 )		fgSizer1.Add( self.m_panel5, 1, wx.ALL, 5 )				self.m_panel6 = wx.Panel( self.m_scrolledWindow1, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.SUNKEN_BORDER|wx.TAB_TRAVERSAL )		self.m_panel6.SetMaxSize( wx.Size( 400,-1 ) )				gSizer5 = wx.GridSizer( 8, 4, 0, 0 )				self.m_button_update_run_results = wx.Button( self.m_panel6, wx.ID_ANY, u"Update Run", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer5.Add( self.m_button_update_run_results, 0, wx.ALL, 5 )				self.m_staticText15 = wx.StaticText( self.m_panel6, wx.ID_ANY, u"Frame Count", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText15.Wrap( -1 )		gSizer5.Add( self.m_staticText15, 0, wx.ALL, 5 )				self.m_staticText16 = wx.StaticText( self.m_panel6, wx.ID_ANY, u"Run Counts", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText16.Wrap( -1 )		gSizer5.Add( self.m_staticText16, 0, wx.ALL, 5 )				self.m_staticText17 = wx.StaticText( self.m_panel6, wx.ID_ANY, u"Run Results", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText17.Wrap( -1 )		gSizer5.Add( self.m_staticText17, 0, wx.ALL, 5 )				self.m_staticText18 = wx.StaticText( self.m_panel6, wx.ID_ANY, u"Total Possible", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText18.Wrap( -1 )		gSizer5.Add( self.m_staticText18, 0, wx.ALL, 5 )				self.m_staticText_frame_total_possible = wx.StaticText( self.m_panel6, wx.ID_ANY, u"0", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText_frame_total_possible.Wrap( -1 )		gSizer5.Add( self.m_staticText_frame_total_possible, 0, wx.ALL, 5 )				self.m_staticText_run_total = wx.StaticText( self.m_panel6, wx.ID_ANY, u"0", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText_run_total.Wrap( -1 )		gSizer5.Add( self.m_staticText_run_total, 0, wx.ALL, 5 )				self.m_staticText_run_accuracy = wx.StaticText( self.m_panel6, wx.ID_ANY, u"Accy: 0.0000", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText_run_accuracy.Wrap( -1 )		gSizer5.Add( self.m_staticText_run_accuracy, 0, wx.ALL, 5 )				self.m_staticText22 = wx.StaticText( self.m_panel6, wx.ID_ANY, u"True Positives", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText22.Wrap( -1 )		gSizer5.Add( self.m_staticText22, 0, wx.ALL, 5 )				self.m_staticText_frame_true_positives = wx.StaticText( self.m_panel6, wx.ID_ANY, u"0", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText_frame_true_positives.Wrap( -1 )		gSizer5.Add( self.m_staticText_frame_true_positives, 0, wx.ALL, 5 )				self.m_staticText_run_true_positives = wx.StaticText( self.m_panel6, wx.ID_ANY, u"0", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText_run_true_positives.Wrap( -1 )		gSizer5.Add( self.m_staticText_run_true_positives, 0, wx.ALL, 5 )				self.m_staticText_run_precision = wx.StaticText( self.m_panel6, wx.ID_ANY, u"Prec: 0.0000", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText_run_precision.Wrap( -1 )		gSizer5.Add( self.m_staticText_run_precision, 0, wx.ALL, 5 )				self.m_staticText26 = wx.StaticText( self.m_panel6, wx.ID_ANY, u"False Positives", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText26.Wrap( -1 )		gSizer5.Add( self.m_staticText26, 0, wx.ALL, 5 )				self.m_staticText_frame_false_positives = wx.StaticText( self.m_panel6, wx.ID_ANY, u"0", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText_frame_false_positives.Wrap( -1 )		gSizer5.Add( self.m_staticText_frame_false_positives, 0, wx.ALL, 5 )				self.m_staticText_run_false_positives = wx.StaticText( self.m_panel6, wx.ID_ANY, u"0", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText_run_false_positives.Wrap( -1 )		gSizer5.Add( self.m_staticText_run_false_positives, 0, wx.ALL, 5 )				self.m_staticText_run_recall = wx.StaticText( self.m_panel6, wx.ID_ANY, u"Rcall: 0.0000", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText_run_recall.Wrap( -1 )		gSizer5.Add( self.m_staticText_run_recall, 0, wx.ALL, 5 )				self.m_staticText30 = wx.StaticText( self.m_panel6, wx.ID_ANY, u"False Negs", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText30.Wrap( -1 )		gSizer5.Add( self.m_staticText30, 0, wx.ALL, 5 )				self.m_staticText_frame_false_negatives = wx.StaticText( self.m_panel6, wx.ID_ANY, u"0", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText_frame_false_negatives.Wrap( -1 )		gSizer5.Add( self.m_staticText_frame_false_negatives, 0, wx.ALL, 5 )				self.m_staticText_run_false_negatives = wx.StaticText( self.m_panel6, wx.ID_ANY, u"0", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText_run_false_negatives.Wrap( -1 )		gSizer5.Add( self.m_staticText_run_false_negatives, 0, wx.ALL, 5 )				self.m_staticText_whoknows = wx.StaticText( self.m_panel6, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText_whoknows.Wrap( -1 )		gSizer5.Add( self.m_staticText_whoknows, 0, wx.ALL, 5 )				self.m_staticText40 = wx.StaticText( self.m_panel6, wx.ID_ANY, u"Min Distance:", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText40.Wrap( -1 )		gSizer5.Add( self.m_staticText40, 0, wx.ALL, 5 )				self.m_textCtrl_min_distance = wx.TextCtrl( self.m_panel6, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_textCtrl_min_distance.SetMaxSize( wx.Size( 80,-1 ) )				gSizer5.Add( self.m_textCtrl_min_distance, 0, wx.ALL, 5 )				self.m_staticText41 = wx.StaticText( self.m_panel6, wx.ID_ANY, u"Max Distance", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText41.Wrap( -1 )		gSizer5.Add( self.m_staticText41, 0, wx.ALL, 5 )				self.m_textCtrl_max_distance = wx.TextCtrl( self.m_panel6, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_textCtrl_max_distance.SetMaxSize( wx.Size( 80,-1 ) )				gSizer5.Add( self.m_textCtrl_max_distance, 0, wx.ALL, 5 )				self.m_button_display_data_viewer = wx.Button( self.m_panel6, wx.ID_ANY, u"Data Viewer", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_button_display_data_viewer.SetMaxSize( wx.Size( 90,-1 ) )				gSizer5.Add( self.m_button_display_data_viewer, 0, wx.ALL, 5 )				self.m_button_kitti_viewer = wx.Button( self.m_panel6, wx.ID_ANY, u"Kitti Viewer", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_button_kitti_viewer.SetMaxSize( wx.Size( 90,-1 ) )				gSizer5.Add( self.m_button_kitti_viewer, 0, wx.ALL, 5 )				self.m_staticText531 = wx.StaticText( self.m_panel6, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText531.Wrap( -1 )		gSizer5.Add( self.m_staticText531, 0, wx.ALL, 5 )				self.m_staticText54 = wx.StaticText( self.m_panel6, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText54.Wrap( -1 )		gSizer5.Add( self.m_staticText54, 0, wx.ALL, 5 )				self.m_checkBox_enable_record_gt = wx.CheckBox( self.m_panel6, wx.ID_ANY, u"Record GT", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer5.Add( self.m_checkBox_enable_record_gt, 0, wx.ALL, 5 )				self.m_textCtrl_record_gt_filepath = wx.TextCtrl( self.m_panel6, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 280,-1 ), 0 )		gSizer5.Add( self.m_textCtrl_record_gt_filepath, 0, wx.ALL, 5 )				self.m_panel6.SetSizer( gSizer5 )		self.m_panel6.Layout()		gSizer5.Fit( self.m_panel6 )		fgSizer1.Add( self.m_panel6, 1, wx.ALL, 5 )				self.m_scrolledWindow1.SetSizer( fgSizer1 )		self.m_scrolledWindow1.Layout()		fgSizer1.Fit( self.m_scrolledWindow1 )		fgSizer17.Add( self.m_scrolledWindow1, 1, wx.EXPAND, 5 )				bSizer1.Add( fgSizer17, 1, wx.EXPAND, 5 )				self.SetSizer( bSizer1 )		self.Layout()				self.Centre( wx.BOTH )				# Connect Events		self.m_panel_video_display.Bind( wx.EVT_LEFT_DOWN, self.process_mouse_left_down )		self.m_panel_video_display.Bind( wx.EVT_RIGHT_DOWN, self.process_mouse_right_down )		self.m_button_get_data.Bind( wx.EVT_BUTTON, self.process_get_data )		self.m_choice_run_date.Bind( wx.EVT_CHOICE, self.process_choose_run_date )		self.m_choice_run_number.Bind( wx.EVT_CHOICE, self.process_choose_run_number )		self.m_choice_num_lidar_segs.Bind( wx.EVT_CHOICE, self.process_num_lidar_segs )		self.m_choice_run_use_detector.Bind( wx.EVT_CHOICE, self.process_use_detector )		self.m_checkBox_use_filtered_data.Bind( wx.EVT_CHECKBOX, self.process_use_filtered_data )		self.m_checkBox_show_coord.Bind( wx.EVT_CHECKBOX, self.process_show_coord )		self.m_checkBox_enable_min_det_confidence.Bind( wx.EVT_CHECKBOX, self.process_enable_min_det_confidence )		self.m_checkBox_show_index_numbers.Bind( wx.EVT_CHECKBOX, self.process_show_index_numbers )		self.m_checkBox_show_kitti_points.Bind( wx.EVT_CHECKBOX, self.process_show_kitti_points )		self.m_checkBox_show_all_kitti_points.Bind( wx.EVT_CHECKBOX, self.process_show_all_kitti_points )		self.m_checkBox_show_ground_truth.Bind( wx.EVT_CHECKBOX, self.process_show_ground_truth )		self.m_colourPicker_ground_truth.Bind( wx.EVT_COLOURPICKER_CHANGED, self.process_ground_truth_color )		self.m_checkBox_show_video_detections.Bind( wx.EVT_CHECKBOX, self.process_show_video_detections )		self.m_colourPicker_video_detections.Bind( wx.EVT_COLOURPICKER_CHANGED, self.process_video_detections_color )		self.m_checkBox_show_lidar_detections.Bind( wx.EVT_CHECKBOX, self.process_show_lidar_detections )		self.m_colourPicker_lidar_detections.Bind( wx.EVT_COLOURPICKER_CHANGED, self.process_lidar_detections_color )		self.m_checkBox_show_associations.Bind( wx.EVT_CHECKBOX, self.process_show_associations )		self.m_colourPicker_associations.Bind( wx.EVT_COLOURPICKER_CHANGED, self.process_associations_color )		self.m_checkBox_show_detection_zones.Bind( wx.EVT_CHECKBOX, self.process_show_detection_zones )		self.m_colourPicker_detection_zones.Bind( wx.EVT_COLOURPICKER_CHANGED, self.process_detection_zone_color )		self.m_checkBox_show_3d_ground_truth.Bind( wx.EVT_CHECKBOX, self.process_show_3d_ground_truth )		self.m_colourPicker_3d_ground_truth_color.Bind( wx.EVT_COLOURPICKER_CHANGED, self.process_3d_ground_truth_color )		self.m_checkBox_show_lidar_values.Bind( wx.EVT_CHECKBOX, self.process_show_lidar_values )		self.m_colourPicker_lidar_values_color.Bind( wx.EVT_COLOURPICKER_CHANGED, self.process_lidar_value_color )		self.m_checkBox_enable_logging.Bind( wx.EVT_CHECKBOX, self.process_enable_logging )		self.m_checkBox_enable_save_png.Bind( wx.EVT_CHECKBOX, self.process_enable_save_png )		self.m_bitmap_back10.Bind( wx.EVT_LEFT_DOWN, self.process_step_backward10 )		self.m_bitmap_back1.Bind( wx.EVT_LEFT_DOWN, self.process_step_backward )		self.m_bitmap_play.Bind( wx.EVT_LEFT_DOWN, self.process_play )		self.m_bitmap_step_forward.Bind( wx.EVT_LEFT_DOWN, self.process_step_forward )		self.m_bitmap_forward10.Bind( wx.EVT_LEFT_DOWN, self.process_step_forward10 )		self.m_button_update.Bind( wx.EVT_BUTTON, self.process_update_image )		self.m_choice_play_speed.Bind( wx.EVT_CHOICE, self.process_play_speed )		self.m_button_goto_frame_number.Bind( wx.EVT_BUTTON, self.process_goto_frame_number )		self.m_choice_lag_frames.Bind( wx.EVT_CHOICE, self.process_lag_frames )		self.m_checkBox_enable_max_cost.Bind( wx.EVT_CHECKBOX, self.process_enable_max_cost )		self.m_checkBox_use_intersecting_only.Bind( wx.EVT_CHECKBOX, self.process_use_intersecting_only )		self.m_button_update_run_results.Bind( wx.EVT_BUTTON, self.process_update_results )		self.m_button_display_data_viewer.Bind( wx.EVT_BUTTON, self.process_display_data_viewer )		self.m_button_kitti_viewer.Bind( wx.EVT_BUTTON, self.process_display_kitti_viewer )		self.m_checkBox_enable_record_gt.Bind( wx.EVT_CHECKBOX, self.process_enable_record_gt )		def __del__( self ):		pass			# Virtual event handlers, overide them in your derived class	def process_mouse_left_down( self, event ):		event.Skip()		def process_mouse_right_down( self, event ):		event.Skip()		def process_get_data( self, event ):		event.Skip()		def process_choose_run_date( self, event ):		event.Skip()		def process_choose_run_number( self, event ):		event.Skip()		def process_num_lidar_segs( self, event ):		event.Skip()		def process_use_detector( self, event ):		event.Skip()		def process_use_filtered_data( self, event ):		event.Skip()		def process_show_coord( self, event ):		event.Skip()		def process_enable_min_det_confidence( self, event ):		event.Skip()		def process_show_index_numbers( self, event ):		event.Skip()		def process_show_kitti_points( self, event ):		event.Skip()		def process_show_all_kitti_points( self, event ):		event.Skip()		def process_show_ground_truth( self, event ):		event.Skip()		def process_ground_truth_color( self, event ):		event.Skip()		def process_show_video_detections( self, event ):		event.Skip()		def process_video_detections_color( self, event ):		event.Skip()		def process_show_lidar_detections( self, event ):		event.Skip()		def process_lidar_detections_color( self, event ):		event.Skip()		def process_show_associations( self, event ):		event.Skip()		def process_associations_color( self, event ):		event.Skip()		def process_show_detection_zones( self, event ):		event.Skip()		def process_detection_zone_color( self, event ):		event.Skip()		def process_show_3d_ground_truth( self, event ):		event.Skip()		def process_3d_ground_truth_color( self, event ):		event.Skip()		def process_show_lidar_values( self, event ):		event.Skip()		def process_lidar_value_color( self, event ):		event.Skip()		def process_enable_logging( self, event ):		event.Skip()		def process_enable_save_png( self, event ):		event.Skip()		def process_step_backward10( self, event ):		event.Skip()		def process_step_backward( self, event ):		event.Skip()		def process_play( self, event ):		event.Skip()		def process_step_forward( self, event ):		event.Skip()		def process_step_forward10( self, event ):		event.Skip()		def process_update_image( self, event ):		event.Skip()		def process_play_speed( self, event ):		event.Skip()		def process_goto_frame_number( self, event ):		event.Skip()		def process_lag_frames( self, event ):		event.Skip()		def process_enable_max_cost( self, event ):		event.Skip()		def process_use_intersecting_only( self, event ):		event.Skip()		def process_update_results( self, event ):		event.Skip()		def process_display_data_viewer( self, event ):		event.Skip()		def process_display_kitti_viewer( self, event ):		event.Skip()		def process_enable_record_gt( self, event ):		event.Skip()	############################################################################# Class Frame_Data_Viewer###########################################################################class Frame_Data_Viewer ( wx.Frame ):		def __init__( self, parent ):		wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = u"Data Viewer", pos = wx.DefaultPosition, size = wx.Size( 800,600 ), style = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )				self.SetSizeHintsSz( wx.DefaultSize, wx.DefaultSize )				bSizer3 = wx.BoxSizer( wx.VERTICAL )				self.m_notebook2 = wx.Notebook( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_panel_ground_truth_data = wx.Panel( self.m_notebook2, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		fgSizer7 = wx.FlexGridSizer( 2, 1, 0, 0 )		fgSizer7.AddGrowableCol( 0 )		fgSizer7.AddGrowableRow( 1 )		fgSizer7.SetFlexibleDirection( wx.BOTH )		fgSizer7.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.m_grid_ground_truth_data = wx.grid.Grid( self.m_panel_ground_truth_data, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.HSCROLL|wx.VSCROLL )				# Grid		self.m_grid_ground_truth_data.CreateGrid( 0, 0 )		self.m_grid_ground_truth_data.EnableEditing( True )		self.m_grid_ground_truth_data.EnableGridLines( True )		self.m_grid_ground_truth_data.EnableDragGridSize( False )		self.m_grid_ground_truth_data.SetMargins( 0, 0 )				# Columns		self.m_grid_ground_truth_data.AutoSizeColumns()		self.m_grid_ground_truth_data.EnableDragColMove( False )		self.m_grid_ground_truth_data.EnableDragColSize( True )		self.m_grid_ground_truth_data.SetColLabelSize( 30 )		self.m_grid_ground_truth_data.SetColLabelAlignment( wx.ALIGN_CENTRE, wx.ALIGN_CENTRE )				# Rows		self.m_grid_ground_truth_data.EnableDragRowSize( True )		self.m_grid_ground_truth_data.SetRowLabelSize( 80 )		self.m_grid_ground_truth_data.SetRowLabelAlignment( wx.ALIGN_CENTRE, wx.ALIGN_CENTRE )				# Label Appearance				# Cell Defaults		self.m_grid_ground_truth_data.SetDefaultCellAlignment( wx.ALIGN_LEFT, wx.ALIGN_TOP )		fgSizer7.Add( self.m_grid_ground_truth_data, 0, wx.ALL|wx.EXPAND, 5 )				self.m_panel_ground_truth_data.SetSizer( fgSizer7 )		self.m_panel_ground_truth_data.Layout()		fgSizer7.Fit( self.m_panel_ground_truth_data )		self.m_notebook2.AddPage( self.m_panel_ground_truth_data, u"Ground Truth Data", False )		self.m_panel_detection_data = wx.Panel( self.m_notebook2, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		fgSizer71 = wx.FlexGridSizer( 2, 1, 0, 0 )		fgSizer71.AddGrowableCol( 0 )		fgSizer71.AddGrowableRow( 1 )		fgSizer71.SetFlexibleDirection( wx.BOTH )		fgSizer71.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.m_grid_detection_data = wx.grid.Grid( self.m_panel_detection_data, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.HSCROLL|wx.VSCROLL )				# Grid		self.m_grid_detection_data.CreateGrid( 0, 0 )		self.m_grid_detection_data.EnableEditing( True )		self.m_grid_detection_data.EnableGridLines( True )		self.m_grid_detection_data.EnableDragGridSize( False )		self.m_grid_detection_data.SetMargins( 0, 0 )				# Columns		self.m_grid_detection_data.AutoSizeColumns()		self.m_grid_detection_data.EnableDragColMove( False )		self.m_grid_detection_data.EnableDragColSize( True )		self.m_grid_detection_data.SetColLabelSize( 30 )		self.m_grid_detection_data.SetColLabelAlignment( wx.ALIGN_CENTRE, wx.ALIGN_CENTRE )				# Rows		self.m_grid_detection_data.EnableDragRowSize( True )		self.m_grid_detection_data.SetRowLabelSize( 80 )		self.m_grid_detection_data.SetRowLabelAlignment( wx.ALIGN_CENTRE, wx.ALIGN_CENTRE )				# Label Appearance				# Cell Defaults		self.m_grid_detection_data.SetDefaultCellAlignment( wx.ALIGN_LEFT, wx.ALIGN_TOP )		fgSizer71.Add( self.m_grid_detection_data, 0, wx.ALL|wx.EXPAND, 5 )				self.m_panel_detection_data.SetSizer( fgSizer71 )		self.m_panel_detection_data.Layout()		fgSizer71.Fit( self.m_panel_detection_data )		self.m_notebook2.AddPage( self.m_panel_detection_data, u"Detection Data", False )		self.m_panel_lidar_data = wx.Panel( self.m_notebook2, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		fgSizer711 = wx.FlexGridSizer( 2, 1, 0, 0 )		fgSizer711.AddGrowableCol( 0 )		fgSizer711.AddGrowableRow( 1 )		fgSizer711.SetFlexibleDirection( wx.BOTH )		fgSizer711.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.m_grid_lidar_data = wx.grid.Grid( self.m_panel_lidar_data, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.HSCROLL|wx.VSCROLL )				# Grid		self.m_grid_lidar_data.CreateGrid( 0, 0 )		self.m_grid_lidar_data.EnableEditing( True )		self.m_grid_lidar_data.EnableGridLines( True )		self.m_grid_lidar_data.EnableDragGridSize( False )		self.m_grid_lidar_data.SetMargins( 0, 0 )				# Columns		self.m_grid_lidar_data.AutoSizeColumns()		self.m_grid_lidar_data.EnableDragColMove( False )		self.m_grid_lidar_data.EnableDragColSize( True )		self.m_grid_lidar_data.SetColLabelSize( 30 )		self.m_grid_lidar_data.SetColLabelAlignment( wx.ALIGN_CENTRE, wx.ALIGN_CENTRE )				# Rows		self.m_grid_lidar_data.EnableDragRowSize( True )		self.m_grid_lidar_data.SetRowLabelSize( 80 )		self.m_grid_lidar_data.SetRowLabelAlignment( wx.ALIGN_CENTRE, wx.ALIGN_CENTRE )				# Label Appearance				# Cell Defaults		self.m_grid_lidar_data.SetDefaultCellAlignment( wx.ALIGN_LEFT, wx.ALIGN_TOP )		fgSizer711.Add( self.m_grid_lidar_data, 0, wx.ALL|wx.EXPAND, 5 )				self.m_panel_lidar_data.SetSizer( fgSizer711 )		self.m_panel_lidar_data.Layout()		fgSizer711.Fit( self.m_panel_lidar_data )		self.m_notebook2.AddPage( self.m_panel_lidar_data, u"Lidar Data", False )		self.m_panel_associations = wx.Panel( self.m_notebook2, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		fgSizer712 = wx.FlexGridSizer( 2, 1, 0, 0 )		fgSizer712.AddGrowableCol( 0 )		fgSizer712.AddGrowableRow( 1 )		fgSizer712.SetFlexibleDirection( wx.BOTH )		fgSizer712.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.m_grid_associations = wx.grid.Grid( self.m_panel_associations, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.HSCROLL|wx.VSCROLL )				# Grid		self.m_grid_associations.CreateGrid( 0, 0 )		self.m_grid_associations.EnableEditing( True )		self.m_grid_associations.EnableGridLines( True )		self.m_grid_associations.EnableDragGridSize( False )		self.m_grid_associations.SetMargins( 0, 0 )				# Columns		self.m_grid_associations.AutoSizeColumns()		self.m_grid_associations.EnableDragColMove( False )		self.m_grid_associations.EnableDragColSize( True )		self.m_grid_associations.SetColLabelSize( 30 )		self.m_grid_associations.SetColLabelAlignment( wx.ALIGN_CENTRE, wx.ALIGN_CENTRE )				# Rows		self.m_grid_associations.AutoSizeRows()		self.m_grid_associations.EnableDragRowSize( False )		self.m_grid_associations.SetRowLabelSize( 80 )		self.m_grid_associations.SetRowLabelAlignment( wx.ALIGN_CENTRE, wx.ALIGN_CENTRE )				# Label Appearance				# Cell Defaults		self.m_grid_associations.SetDefaultCellAlignment( wx.ALIGN_LEFT, wx.ALIGN_TOP )		fgSizer712.Add( self.m_grid_associations, 0, wx.ALL|wx.EXPAND, 5 )				self.m_panel_associations.SetSizer( fgSizer712 )		self.m_panel_associations.Layout()		fgSizer712.Fit( self.m_panel_associations )		self.m_notebook2.AddPage( self.m_panel_associations, u"Associations", False )		self.m_panel_costs = wx.Panel( self.m_notebook2, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		bSizer10 = wx.BoxSizer( wx.VERTICAL )				self.m_notebook_Costs = wx.Notebook( self.m_panel_costs, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_panel_total_cost = wx.Panel( self.m_notebook_Costs, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		fgSizer30 = wx.FlexGridSizer( 2, 1, 0, 0 )		fgSizer30.AddGrowableCol( 0 )		fgSizer30.AddGrowableRow( 1 )		fgSizer30.SetFlexibleDirection( wx.BOTH )		fgSizer30.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.m_grid_total_cost = wx.grid.Grid( self.m_panel_total_cost, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.HSCROLL|wx.VSCROLL )				# Grid		self.m_grid_total_cost.CreateGrid( 0, 0 )		self.m_grid_total_cost.EnableEditing( True )		self.m_grid_total_cost.EnableGridLines( True )		self.m_grid_total_cost.EnableDragGridSize( False )		self.m_grid_total_cost.SetMargins( 0, 0 )				# Columns		self.m_grid_total_cost.AutoSizeColumns()		self.m_grid_total_cost.EnableDragColMove( False )		self.m_grid_total_cost.EnableDragColSize( True )		self.m_grid_total_cost.SetColLabelSize( 30 )		self.m_grid_total_cost.SetColLabelAlignment( wx.ALIGN_CENTRE, wx.ALIGN_CENTRE )				# Rows		self.m_grid_total_cost.EnableDragRowSize( True )		self.m_grid_total_cost.SetRowLabelSize( 80 )		self.m_grid_total_cost.SetRowLabelAlignment( wx.ALIGN_CENTRE, wx.ALIGN_CENTRE )				# Label Appearance				# Cell Defaults		self.m_grid_total_cost.SetDefaultCellAlignment( wx.ALIGN_LEFT, wx.ALIGN_TOP )		fgSizer30.Add( self.m_grid_total_cost, 0, wx.ALL|wx.EXPAND, 5 )				self.m_panel_total_cost.SetSizer( fgSizer30 )		self.m_panel_total_cost.Layout()		fgSizer30.Fit( self.m_panel_total_cost )		self.m_notebook_Costs.AddPage( self.m_panel_total_cost, u"Total Cost", False )		self.m_panel_l2_norm_cost = wx.Panel( self.m_notebook_Costs, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		fgSizer31 = wx.FlexGridSizer( 2, 1, 0, 0 )		fgSizer31.AddGrowableCol( 0 )		fgSizer31.AddGrowableRow( 0 )		fgSizer31.SetFlexibleDirection( wx.BOTH )		fgSizer31.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.m_grid_l2_norm_cost = wx.grid.Grid( self.m_panel_l2_norm_cost, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.HSCROLL|wx.VSCROLL )				# Grid		self.m_grid_l2_norm_cost.CreateGrid( 0, 0 )		self.m_grid_l2_norm_cost.EnableEditing( True )		self.m_grid_l2_norm_cost.EnableGridLines( True )		self.m_grid_l2_norm_cost.EnableDragGridSize( False )		self.m_grid_l2_norm_cost.SetMargins( 0, 0 )				# Columns		self.m_grid_l2_norm_cost.AutoSizeColumns()		self.m_grid_l2_norm_cost.EnableDragColMove( False )		self.m_grid_l2_norm_cost.EnableDragColSize( True )		self.m_grid_l2_norm_cost.SetColLabelSize( 30 )		self.m_grid_l2_norm_cost.SetColLabelAlignment( wx.ALIGN_CENTRE, wx.ALIGN_CENTRE )				# Rows		self.m_grid_l2_norm_cost.EnableDragRowSize( True )		self.m_grid_l2_norm_cost.SetRowLabelSize( 80 )		self.m_grid_l2_norm_cost.SetRowLabelAlignment( wx.ALIGN_CENTRE, wx.ALIGN_CENTRE )				# Label Appearance				# Cell Defaults		self.m_grid_l2_norm_cost.SetDefaultCellAlignment( wx.ALIGN_LEFT, wx.ALIGN_TOP )		fgSizer31.Add( self.m_grid_l2_norm_cost, 0, wx.ALL|wx.EXPAND, 5 )				self.m_panel_l2_norm_cost.SetSizer( fgSizer31 )		self.m_panel_l2_norm_cost.Layout()		fgSizer31.Fit( self.m_panel_l2_norm_cost )		self.m_notebook_Costs.AddPage( self.m_panel_l2_norm_cost, u"L2 Norm Cost", False )		self.m_panel_y2_est_cost = wx.Panel( self.m_notebook_Costs, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		fgSizer32 = wx.FlexGridSizer( 2, 1, 0, 0 )		fgSizer32.AddGrowableCol( 0 )		fgSizer32.AddGrowableRow( 1 )		fgSizer32.SetFlexibleDirection( wx.BOTH )		fgSizer32.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.m_grid_y2_est_cost = wx.grid.Grid( self.m_panel_y2_est_cost, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.HSCROLL|wx.VSCROLL )				# Grid		self.m_grid_y2_est_cost.CreateGrid( 0, 0 )		self.m_grid_y2_est_cost.EnableEditing( True )		self.m_grid_y2_est_cost.EnableGridLines( True )		self.m_grid_y2_est_cost.EnableDragGridSize( False )		self.m_grid_y2_est_cost.SetMargins( 0, 0 )				# Columns		self.m_grid_y2_est_cost.AutoSizeColumns()		self.m_grid_y2_est_cost.EnableDragColMove( False )		self.m_grid_y2_est_cost.EnableDragColSize( True )		self.m_grid_y2_est_cost.SetColLabelSize( 30 )		self.m_grid_y2_est_cost.SetColLabelAlignment( wx.ALIGN_CENTRE, wx.ALIGN_CENTRE )				# Rows		self.m_grid_y2_est_cost.EnableDragRowSize( True )		self.m_grid_y2_est_cost.SetRowLabelSize( 80 )		self.m_grid_y2_est_cost.SetRowLabelAlignment( wx.ALIGN_CENTRE, wx.ALIGN_CENTRE )				# Label Appearance				# Cell Defaults		self.m_grid_y2_est_cost.SetDefaultCellAlignment( wx.ALIGN_LEFT, wx.ALIGN_TOP )		fgSizer32.Add( self.m_grid_y2_est_cost, 0, wx.ALL|wx.EXPAND, 5 )				self.m_panel_y2_est_cost.SetSizer( fgSizer32 )		self.m_panel_y2_est_cost.Layout()		fgSizer32.Fit( self.m_panel_y2_est_cost )		self.m_notebook_Costs.AddPage( self.m_panel_y2_est_cost, u"y2 Estimate Cost", False )		self.m_panel_iou_cost = wx.Panel( self.m_notebook_Costs, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		fgSizer33 = wx.FlexGridSizer( 2, 1, 0, 0 )		fgSizer33.AddGrowableCol( 0 )		fgSizer33.AddGrowableRow( 1 )		fgSizer33.SetFlexibleDirection( wx.BOTH )		fgSizer33.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.m_grid_iou_cost = wx.grid.Grid( self.m_panel_iou_cost, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.HSCROLL|wx.VSCROLL )				# Grid		self.m_grid_iou_cost.CreateGrid( 0, 0 )		self.m_grid_iou_cost.EnableEditing( True )		self.m_grid_iou_cost.EnableGridLines( True )		self.m_grid_iou_cost.EnableDragGridSize( False )		self.m_grid_iou_cost.SetMargins( 0, 0 )				# Columns		self.m_grid_iou_cost.AutoSizeColumns()		self.m_grid_iou_cost.EnableDragColMove( False )		self.m_grid_iou_cost.EnableDragColSize( True )		self.m_grid_iou_cost.SetColLabelSize( 30 )		self.m_grid_iou_cost.SetColLabelAlignment( wx.ALIGN_CENTRE, wx.ALIGN_CENTRE )				# Rows		self.m_grid_iou_cost.EnableDragRowSize( True )		self.m_grid_iou_cost.SetRowLabelSize( 80 )		self.m_grid_iou_cost.SetRowLabelAlignment( wx.ALIGN_CENTRE, wx.ALIGN_CENTRE )				# Label Appearance				# Cell Defaults		self.m_grid_iou_cost.SetDefaultCellAlignment( wx.ALIGN_LEFT, wx.ALIGN_TOP )		fgSizer33.Add( self.m_grid_iou_cost, 0, wx.ALL|wx.EXPAND, 5 )				self.m_panel_iou_cost.SetSizer( fgSizer33 )		self.m_panel_iou_cost.Layout()		fgSizer33.Fit( self.m_panel_iou_cost )		self.m_notebook_Costs.AddPage( self.m_panel_iou_cost, u"IOU Cost", False )		self.m_panel_seg_intersect = wx.Panel( self.m_notebook_Costs, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		fgSizer331 = wx.FlexGridSizer( 2, 1, 0, 0 )		fgSizer331.AddGrowableCol( 0 )		fgSizer331.AddGrowableRow( 1 )		fgSizer331.SetFlexibleDirection( wx.BOTH )		fgSizer331.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.m_grid_seg_intersect = wx.grid.Grid( self.m_panel_seg_intersect, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.HSCROLL|wx.VSCROLL )				# Grid		self.m_grid_seg_intersect.CreateGrid( 0, 0 )		self.m_grid_seg_intersect.EnableEditing( True )		self.m_grid_seg_intersect.EnableGridLines( True )		self.m_grid_seg_intersect.EnableDragGridSize( False )		self.m_grid_seg_intersect.SetMargins( 0, 0 )				# Columns		self.m_grid_seg_intersect.AutoSizeColumns()		self.m_grid_seg_intersect.EnableDragColMove( False )		self.m_grid_seg_intersect.EnableDragColSize( True )		self.m_grid_seg_intersect.SetColLabelSize( 30 )		self.m_grid_seg_intersect.SetColLabelAlignment( wx.ALIGN_CENTRE, wx.ALIGN_CENTRE )				# Rows		self.m_grid_seg_intersect.EnableDragRowSize( True )		self.m_grid_seg_intersect.SetRowLabelSize( 80 )		self.m_grid_seg_intersect.SetRowLabelAlignment( wx.ALIGN_CENTRE, wx.ALIGN_CENTRE )				# Label Appearance				# Cell Defaults		self.m_grid_seg_intersect.SetDefaultCellAlignment( wx.ALIGN_LEFT, wx.ALIGN_TOP )		fgSizer331.Add( self.m_grid_seg_intersect, 0, wx.ALL|wx.EXPAND, 5 )				self.m_panel_seg_intersect.SetSizer( fgSizer331 )		self.m_panel_seg_intersect.Layout()		fgSizer331.Fit( self.m_panel_seg_intersect )		self.m_notebook_Costs.AddPage( self.m_panel_seg_intersect, u"Seg Intersect Cost", False )				bSizer10.Add( self.m_notebook_Costs, 1, wx.EXPAND |wx.ALL, 5 )				self.m_panel_costs.SetSizer( bSizer10 )		self.m_panel_costs.Layout()		bSizer10.Fit( self.m_panel_costs )		self.m_notebook2.AddPage( self.m_panel_costs, u"Costs", False )				bSizer3.Add( self.m_notebook2, 1, wx.EXPAND |wx.ALL, 5 )				self.SetSizer( bSizer3 )		self.Layout()				self.Centre( wx.BOTH )				# Connect Events		self.m_grid_ground_truth_data.Bind( wx.grid.EVT_GRID_RANGE_SELECT, self.process_range_select_ground_truth )		def __del__( self ):		pass			# Virtual event handlers, overide them in your derived class	def process_range_select_ground_truth( self, event ):		event.Skip()	############################################################################# Class Frame_Kitti_Viewer###########################################################################class Frame_Kitti_Viewer ( wx.Frame ):		def __init__( self, parent ):		wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = u"Kitti Viewer", pos = wx.DefaultPosition, size = wx.Size( 800,600 ), style = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )				self.SetSizeHintsSz( wx.DefaultSize, wx.DefaultSize )				bSizer11 = wx.BoxSizer( wx.VERTICAL )				self.m_notebook6 = wx.Notebook( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_panel_clusters = wx.Panel( self.m_notebook6, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		self.m_notebook6.AddPage( self.m_panel_clusters, u"Clusters", False )		self.m_panel_kitti_data = wx.Panel( self.m_notebook6, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		fgSizer34 = wx.FlexGridSizer( 2, 1, 0, 0 )		fgSizer34.AddGrowableCol( 0 )		fgSizer34.AddGrowableRow( 1 )		fgSizer34.SetFlexibleDirection( wx.BOTH )		fgSizer34.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.m_panel45 = wx.Panel( self.m_panel_kitti_data, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		fgSizer38 = wx.FlexGridSizer( 1, 5, 0, 0 )		fgSizer38.SetFlexibleDirection( wx.BOTH )		fgSizer38.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.m_staticText43 = wx.StaticText( self.m_panel45, wx.ID_ANY, u"Clusters", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText43.Wrap( -1 )		fgSizer38.Add( self.m_staticText43, 0, wx.ALL, 5 )				m_choice_show_clustersChoices = [ u"All", u"Nearest 3", u"Nearest 6", u"17", u"5", u"2", u"4" ]		self.m_choice_show_clusters = wx.Choice( self.m_panel45, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, m_choice_show_clustersChoices, 0 )		self.m_choice_show_clusters.SetSelection( 1 )		fgSizer38.Add( self.m_choice_show_clusters, 0, wx.ALL, 5 )				self.m_staticText44 = wx.StaticText( self.m_panel45, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText44.Wrap( -1 )		fgSizer38.Add( self.m_staticText44, 0, wx.ALL, 5 )				self.m_staticText45 = wx.StaticText( self.m_panel45, wx.ID_ANY, u"Segments", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText45.Wrap( -1 )		fgSizer38.Add( self.m_staticText45, 0, wx.ALL, 5 )				m_choice_show_segmentsChoices = [ u"All", u"0", u"1", u"2", u"3", u"4", u"5", u"6", u"7", u"8", u"9", u"10", u"11", u"12", u"13", u"14", u"15" ]		self.m_choice_show_segments = wx.Choice( self.m_panel45, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, m_choice_show_segmentsChoices, 0 )		self.m_choice_show_segments.SetSelection( 0 )		fgSizer38.Add( self.m_choice_show_segments, 0, wx.ALL, 5 )				self.m_panel45.SetSizer( fgSizer38 )		self.m_panel45.Layout()		fgSizer38.Fit( self.m_panel45 )		fgSizer34.Add( self.m_panel45, 1, wx.EXPAND |wx.ALL, 5 )				self.m_grid_kitti_data = wx.grid.Grid( self.m_panel_kitti_data, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, 0 )				# Grid		self.m_grid_kitti_data.CreateGrid( 0, 0 )		self.m_grid_kitti_data.EnableEditing( True )		self.m_grid_kitti_data.EnableGridLines( True )		self.m_grid_kitti_data.EnableDragGridSize( False )		self.m_grid_kitti_data.SetMargins( 0, 0 )				# Columns		self.m_grid_kitti_data.EnableDragColMove( False )		self.m_grid_kitti_data.EnableDragColSize( True )		self.m_grid_kitti_data.SetColLabelSize( 30 )		self.m_grid_kitti_data.SetColLabelAlignment( wx.ALIGN_CENTRE, wx.ALIGN_CENTRE )				# Rows		self.m_grid_kitti_data.EnableDragRowSize( True )		self.m_grid_kitti_data.SetRowLabelSize( 80 )		self.m_grid_kitti_data.SetRowLabelAlignment( wx.ALIGN_CENTRE, wx.ALIGN_CENTRE )				# Label Appearance				# Cell Defaults		self.m_grid_kitti_data.SetDefaultCellAlignment( wx.ALIGN_LEFT, wx.ALIGN_TOP )		fgSizer34.Add( self.m_grid_kitti_data, 0, wx.ALL|wx.EXPAND, 5 )				self.m_panel_kitti_data.SetSizer( fgSizer34 )		self.m_panel_kitti_data.Layout()		fgSizer34.Fit( self.m_panel_kitti_data )		self.m_notebook6.AddPage( self.m_panel_kitti_data, u"Kitti Data", False )		self.m_panel_kitti_hist = wx.Panel( self.m_notebook6, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		fgSizer13 = wx.FlexGridSizer( 2, 1, 0, 0 )		fgSizer13.AddGrowableCol( 0 )		fgSizer13.AddGrowableRow( 1 )		fgSizer13.SetFlexibleDirection( wx.BOTH )		fgSizer13.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.m_panel_kitti_hist_controls = wx.Panel( self.m_panel_kitti_hist, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		fgSizer14 = wx.FlexGridSizer( 1, 9, 0, 0 )		fgSizer14.SetFlexibleDirection( wx.BOTH )		fgSizer14.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.m_staticText38 = wx.StaticText( self.m_panel_kitti_hist_controls, wx.ID_ANY, u"Object #", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText38.Wrap( -1 )		fgSizer14.Add( self.m_staticText38, 0, wx.ALL, 5 )				m_choice_hist_objectChoices = []		self.m_choice_hist_object = wx.Choice( self.m_panel_kitti_hist_controls, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, m_choice_hist_objectChoices, 0 )		self.m_choice_hist_object.SetSelection( 0 )		fgSizer14.Add( self.m_choice_hist_object, 0, wx.ALL, 5 )				self.m_staticText39 = wx.StaticText( self.m_panel_kitti_hist_controls, wx.ID_ANY, u"Segment", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText39.Wrap( -1 )		fgSizer14.Add( self.m_staticText39, 0, wx.ALL, 5 )				m_choice_hist_segmentChoices = []		self.m_choice_hist_segment = wx.Choice( self.m_panel_kitti_hist_controls, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, m_choice_hist_segmentChoices, 0 )		self.m_choice_hist_segment.SetSelection( 0 )		fgSizer14.Add( self.m_choice_hist_segment, 0, wx.ALL, 5 )				self.m_staticText46 = wx.StaticText( self.m_panel_kitti_hist_controls, wx.ID_ANY, u"Min:", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText46.Wrap( -1 )		fgSizer14.Add( self.m_staticText46, 0, wx.ALL, 5 )				self.m_textCtrl_hist_vmin = wx.TextCtrl( self.m_panel_kitti_hist_controls, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		fgSizer14.Add( self.m_textCtrl_hist_vmin, 0, wx.ALL, 5 )				self.m_staticText47 = wx.StaticText( self.m_panel_kitti_hist_controls, wx.ID_ANY, u"Max:", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText47.Wrap( -1 )		fgSizer14.Add( self.m_staticText47, 0, wx.ALL, 5 )				self.m_textCtrl_hist_vmax = wx.TextCtrl( self.m_panel_kitti_hist_controls, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		fgSizer14.Add( self.m_textCtrl_hist_vmax, 0, wx.ALL, 5 )				self.m_checkBox_show_hist_region = wx.CheckBox( self.m_panel_kitti_hist_controls, wx.ID_ANY, u"Show", wx.DefaultPosition, wx.DefaultSize, 0 )		fgSizer14.Add( self.m_checkBox_show_hist_region, 0, wx.ALL, 5 )				self.m_panel_kitti_hist_controls.SetSizer( fgSizer14 )		self.m_panel_kitti_hist_controls.Layout()		fgSizer14.Fit( self.m_panel_kitti_hist_controls )		fgSizer13.Add( self.m_panel_kitti_hist_controls, 1, wx.EXPAND |wx.ALL, 5 )				self.m_panel_kitti_histograms = wx.Panel( self.m_panel_kitti_hist, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		fgSizer13.Add( self.m_panel_kitti_histograms, 1, wx.EXPAND |wx.ALL, 5 )				self.m_panel_kitti_hist.SetSizer( fgSizer13 )		self.m_panel_kitti_hist.Layout()		fgSizer13.Fit( self.m_panel_kitti_hist )		self.m_notebook6.AddPage( self.m_panel_kitti_hist, u"Kitti Histograms", False )		self.m_panel_kitti_contour = wx.Panel( self.m_notebook6, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		fgSizer131 = wx.FlexGridSizer( 2, 1, 0, 0 )		fgSizer131.AddGrowableCol( 0 )		fgSizer131.AddGrowableRow( 1 )		fgSizer131.SetFlexibleDirection( wx.BOTH )		fgSizer131.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.m_panel_kitti_contour_controls1 = wx.Panel( self.m_panel_kitti_contour, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		fgSizer141 = wx.FlexGridSizer( 1, 9, 0, 0 )		fgSizer141.SetFlexibleDirection( wx.BOTH )		fgSizer141.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.m_staticText381 = wx.StaticText( self.m_panel_kitti_contour_controls1, wx.ID_ANY, u"Object#", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText381.Wrap( -1 )		fgSizer141.Add( self.m_staticText381, 0, wx.ALL, 5 )				m_choice_contour_objectChoices = []		self.m_choice_contour_object = wx.Choice( self.m_panel_kitti_contour_controls1, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, m_choice_contour_objectChoices, 0 )		self.m_choice_contour_object.SetSelection( 0 )		fgSizer141.Add( self.m_choice_contour_object, 0, wx.ALL, 5 )				self.m_staticText391 = wx.StaticText( self.m_panel_kitti_contour_controls1, wx.ID_ANY, u"Segment", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText391.Wrap( -1 )		fgSizer141.Add( self.m_staticText391, 0, wx.ALL, 5 )				m_choice_contour_segmentChoices = []		self.m_choice_contour_segment = wx.Choice( self.m_panel_kitti_contour_controls1, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, m_choice_contour_segmentChoices, 0 )		self.m_choice_contour_segment.SetSelection( 0 )		fgSizer141.Add( self.m_choice_contour_segment, 0, wx.ALL, 5 )				self.m_staticText441 = wx.StaticText( self.m_panel_kitti_contour_controls1, wx.ID_ANY, u"Min:", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText441.Wrap( -1 )		fgSizer141.Add( self.m_staticText441, 0, wx.ALL, 5 )				self.m_textCtrl_contour_vmin = wx.TextCtrl( self.m_panel_kitti_contour_controls1, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		fgSizer141.Add( self.m_textCtrl_contour_vmin, 0, wx.ALL, 5 )				self.m_staticText451 = wx.StaticText( self.m_panel_kitti_contour_controls1, wx.ID_ANY, u"Max:", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText451.Wrap( -1 )		fgSizer141.Add( self.m_staticText451, 0, wx.ALL, 5 )				self.m_textCtrl_contour_vmax = wx.TextCtrl( self.m_panel_kitti_contour_controls1, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		fgSizer141.Add( self.m_textCtrl_contour_vmax, 0, wx.ALL, 5 )				self.m_checkBox_show_contour_region = wx.CheckBox( self.m_panel_kitti_contour_controls1, wx.ID_ANY, u"Show", wx.DefaultPosition, wx.DefaultSize, 0 )		fgSizer141.Add( self.m_checkBox_show_contour_region, 0, wx.ALL, 5 )				self.m_panel_kitti_contour_controls1.SetSizer( fgSizer141 )		self.m_panel_kitti_contour_controls1.Layout()		fgSizer141.Fit( self.m_panel_kitti_contour_controls1 )		fgSizer131.Add( self.m_panel_kitti_contour_controls1, 1, wx.EXPAND |wx.ALL, 5 )				self.m_panel_kitti_contours = wx.Panel( self.m_panel_kitti_contour, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		fgSizer131.Add( self.m_panel_kitti_contours, 1, wx.EXPAND |wx.ALL, 5 )				self.m_panel_kitti_contour.SetSizer( fgSizer131 )		self.m_panel_kitti_contour.Layout()		fgSizer131.Fit( self.m_panel_kitti_contour )		self.m_notebook6.AddPage( self.m_panel_kitti_contour, u"Distance Contour", False )				bSizer11.Add( self.m_notebook6, 1, wx.EXPAND |wx.ALL, 5 )				self.SetSizer( bSizer11 )		self.Layout()				self.Centre( wx.BOTH )				# Connect Events		self.m_choice_show_clusters.Bind( wx.EVT_CHOICE, self.process_show_clusters )		self.m_choice_show_segments.Bind( wx.EVT_CHOICE, self.process_show_segments )		self.m_choice_hist_object.Bind( wx.EVT_CHOICE, self.process_hist_object )		self.m_choice_hist_segment.Bind( wx.EVT_CHOICE, self.process_hist_segment )		self.m_checkBox_show_hist_region.Bind( wx.EVT_CHECKBOX, self.process_show_hist_region )		self.m_choice_contour_object.Bind( wx.EVT_CHOICE, self.process_contour_object )		self.m_choice_contour_segment.Bind( wx.EVT_CHOICE, self.process_contour_segment )		self.m_checkBox_show_contour_region.Bind( wx.EVT_CHECKBOX, self.process_show_contour_region )		def __del__( self ):		pass			# Virtual event handlers, overide them in your derived class	def process_show_clusters( self, event ):		event.Skip()		def process_show_segments( self, event ):		event.Skip()		def process_hist_object( self, event ):		event.Skip()		def process_hist_segment( self, event ):		event.Skip()		def process_show_hist_region( self, event ):		event.Skip()		def process_contour_object( self, event ):		event.Skip()		def process_contour_segment( self, event ):		event.Skip()		def process_show_contour_region( self, event ):		event.Skip()	